/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fileclassifier;


import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/**
 *
 * @author viranjan
 */
public class Rar extends javax.swing.JFrame {

    /**
     * Creates new form Rar
     */
   Test t=new Test();
   public Rar() throws IOException {
        initComponents();
        File currdir= new File("C:\\Users\\viranjan\\Desktop");
        
//        JLabel label1 = new JLabel("Test");
//        label1.setText("Label Text");
        if(new File("rar.txt").exists())
            new File("rar.txt").delete();
            
        displayDirectoryContents(currdir);
        findDirectory("D:\\" );
        findDirectory("E:\\" );
        findDirectory("F:\\" );
        t.Displayfile("rar.txt","rar.txt");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Rar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Rar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Rar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Rar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
       java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Rar().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Text.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
 public  void findDirectory( String a) throws IOException{
        File folder = new File(a);
      File[] fileList = folder.listFiles();

    if (fileList == null) {
        // throw an exception, return or do any other error handling here
        return;
    }

    // path is correct

    for (final File file : fileList ) {
        if(file.isDirectory()){
            
            String s=file.getName();
           // String a="D:\\";
          
            String res=a+s;
            //System.out.println(res);
           
           
           Path directory = Paths.get(res);
		boolean isDirectory = Files.isDirectory(directory);
		boolean isWritable = Files.isWritable(directory);
            if(isWritable==true){
                //System.out.println(res);  
                 File f = new File(res);
                displayDirectoryContents(f);
            }
              
           
        }
         
           
       
        else  if(file.getName().endsWith(".rar"))
              t.printt("rar.txt",file.getAbsolutePath());
        //System.out.println( file.getName());
    }
    }
    
    public  void displayDirectoryContents(File dir)
    {
        File[] files = dir.listFiles();
        for (File file : files)  {
            if (file.isDirectory()) {
             
                displayDirectoryContents(file);
            } 
            else 
            {
                 int lastIndex = file.getName().lastIndexOf('.');
               
               if(lastIndex>1){
               String str = file.getName();
                 //System.out.println( str);
                
                 if(file.getName().endsWith(".rar")) {
                     t.printt("rar.txt",file.getAbsolutePath());
                    // System.out.println( file.getName());
                 }
               }
            }
         }
       
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
